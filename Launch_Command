ros2 launch kuka_description gazebo.launch.py 
ros2 launch kuka_controller controller.launch.py

* 터미널에서 명령 주기:
ros2 topic pub /arm_controller/joint_trajectory trajectory_msgs/msg/JointTrajectory "{joint_names: ['joint_1', 'joint_2', 'joint_3', 'joint_4', 'joint_5', 'joint_6'], points: [{positions: [1.0, 0.5, -0.5, 1.0, 0.0, -1.0], time_from_start: {sec: 1, nanosec: 0}}]}"

* 명령 주는 C++노드
ros2 run kuka_control_box trajectory_publisher
(나중에 velocity, acceleration, effort도 줄 수 있음.)



<Kuka Controller>(input : Cartesian space)
0719 목표 : 
C++ 파일로 로봇 Joint 명령 주기.
그다음 목표 :
C++ : 위 명령 앞에 Inverse Kinematics푸는 부분 붙혀서, position받으면 움직이게 만들기. 


그 다음 목표 :
Python으로 시뮬레이션이랑, Kuka interface 에 명령 주었을 때 동일하게 움직이도록 하기
	Topic 또는 Service 직접 정의해서 해야 함.
